{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.1",
    "parameters": {
        "workbookDisplayName": {
            "defaultValue": "Arc Servers & Azure VMs extensions monitor",
            "type": "String",
            "metadata": {
                "description": "The friendly name for the workbook that is used in the Gallery or Saved List.  This name must be unique within a resource group."
            }
        },
        "workbookType": {
            "defaultValue": "workbook",
            "type": "String",
            "metadata": {
                "description": "The gallery that the workbook will been shown under. Supported values include workbook, tsg, etc. Usually, this is 'workbook'"
            }
        },
        "workbookSourceId": {
            "defaultValue": "azure monitor",
            "type": "String",
            "metadata": {
                "description": "The id of resource instance to which the workbook will be associated"
            }
        },
        "workbookId": {
            "defaultValue": "[newGuid()]",
            "type": "String",
            "metadata": {
                "description": "The unique guid for this workbook instance"
            }
        },
        "ExtensionWindows1": {
            "allowedValues": [
                "AdminCenter",
                "AzureBackupWindowsWorkload",
                "AzureMonitorWindowsAgent",
                "AzureSecurityWindowsAgent",
                "ChangeTracking-Windows",
                "CustomScriptExtension",
                "DependencyAgentWindows",
                "DSC",
                "HybridWorkerForWindows",
                "IaaSAntimalware",
                "IaaSDiagnostics",
                "JsonADDomainExtension",
                "KeyVaultForWindows",
                "MDE.Windows",
                "MicrosoftMonitoringAgent",
                "NetworkWatcherAgentWindows",
                "SqlIaaSAgent",
                "VMAccessAgent",
                "WindowsAgent.SqlServer",
                "WindowsAgent.AzureSecurityCenter",
                "WindowsOsUpdateExtension",
                "WindowsPatchExtension"
            ],
            "defaultValue": "AzureMonitorWindowsAgent",
            "type": "String",
            "metadata": {
                "description": "Choose a windows extension from the list to monitor it in the workbook"
            }
        },
        "ExtensionWindows2": {
            "allowedValues": [
                "AdminCenter",
                "AzureBackupWindowsWorkload",
                "AzureMonitorWindowsAgent",
                "AzureSecurityWindowsAgent",
                "ChangeTracking-Windows",
                "CustomScriptExtension",
                "DependencyAgentWindows",
                "DSC",
                "HybridWorkerForWindows",
                "IaaSAntimalware",
                "IaaSDiagnostics",
                "JsonADDomainExtension",
                "KeyVaultForWindows",
                "MDE.Windows",
                "MicrosoftMonitoringAgent",
                "NetworkWatcherAgentWindows",
                "SqlIaaSAgent",
                "VMAccessAgent",
                "WindowsAgent.SqlServer",
                "WindowsAgent.AzureSecurityCenter",
                "WindowsOsUpdateExtension",
                "WindowsPatchExtension"
            ],
            "defaultValue": "DependencyAgentWindows",
            "type": "String",
            "metadata": {
                "description": "Choose a windows extension from the list to monitor it in the workbook"
            }
        },
        "ExtensionWindows3": {
            "allowedValues": [
                "AdminCenter",
                "AzureBackupWindowsWorkload",
                "AzureMonitorWindowsAgent",
                "AzureSecurityWindowsAgent",
                "ChangeTracking-Windows",
                "CustomScriptExtension",
                "DependencyAgentWindows",
                "DSC",
                "HybridWorkerForWindows",
                "IaaSAntimalware",
                "IaaSDiagnostics",
                "JsonADDomainExtension",
                "KeyVaultForWindows",
                "MDE.Windows",
                "MicrosoftMonitoringAgent",
                "NetworkWatcherAgentWindows",
                "SqlIaaSAgent",
                "VMAccessAgent",
                "WindowsAgent.SqlServer",
                "WindowsAgent.AzureSecurityCenter",
                "WindowsOsUpdateExtension",
                "WindowsPatchExtension"
            ],
            "defaultValue": "MDE.Windows",
            "type": "String",
            "metadata": {
                "description": "Choose a windows extension from the list to monitor it in the workbook"
            }
        },
        "ExtensionWindows4": {
            "allowedValues": [
                "AdminCenter",
                "AzureBackupWindowsWorkload",
                "AzureMonitorWindowsAgent",
                "AzureSecurityWindowsAgent",
                "ChangeTracking-Windows",
                "CustomScriptExtension",
                "DependencyAgentWindows",
                "DSC",
                "HybridWorkerForWindows",
                "IaaSAntimalware",
                "IaaSDiagnostics",
                "JsonADDomainExtension",
                "KeyVaultForWindows",
                "MDE.Windows",
                "MicrosoftMonitoringAgent",
                "NetworkWatcherAgentWindows",
                "SqlIaaSAgent",
                "VMAccessAgent",
                "WindowsAgent.SqlServer",
                "WindowsAgent.AzureSecurityCenter",
                "WindowsOsUpdateExtension",
                "WindowsPatchExtension"
            ],
            "defaultValue": "WindowsAgent.AzureSecurityCenter",
            "type": "String",
            "metadata": {
                "description": "Choose a windows extension from the list to monitor it in the workbook"
            }
        },
        "ExtensionLinux1": {
            "allowedValues": [
                "AADSSHLoginForLinux",
                "AzureMonitorLinuxAgent",
                "AzureSecurityLinuxAgent",
                "ChangeTracking-Linux",
                "ConfigurationforLinux",
                "DependencyAgentLinux",
                "LinuxOsUpdateExtension",
                "LinuxAgent.AzureSecurityCenter",
                "LinuxDiagnostic",
                "LinuxPatchExtension",
                "MDE.Linux",
                "NetworkWatcherAgentLinux",
                "OmsAgentForLinux",
                "VMAccessForLinux"
            ],
            "defaultValue": "OmsAgentForLinux",
            "type": "String",
            "metadata": {
                "description": "Choose a Linux extension from the list to monitor it in the workbook"
            }
        },
        "ExtensionLinux2": {
            "allowedValues": [
                "AADSSHLoginForLinux",
                "AzureMonitorLinuxAgent",
                "AzureSecurityLinuxAgent",
                "ChangeTracking-Linux",
                "ConfigurationforLinux",
                "DependencyAgentLinux",
                "LinuxOsUpdateExtension",
                "LinuxAgent.AzureSecurityCenter",
                "LinuxDiagnostic",
                "LinuxPatchExtension",
                "MDE.Linux",
                "NetworkWatcherAgentLinux",
                "OmsAgentForLinux",
                "VMAccessForLinux"
            ],
            "defaultValue": "DependencyAgentLinux",
            "type": "String",
            "metadata": {
                "description": "Choose a Linux extension from the list to monitor it in the workbook"
            }
        },
        "ExtensionLinux3": {
            "allowedValues": [
                "AADSSHLoginForLinux",
                "AzureMonitorLinuxAgent",
                "AzureSecurityLinuxAgent",
                "ChangeTracking-Linux",
                "ConfigurationforLinux",
                "DependencyAgentLinux",
                "LinuxOsUpdateExtension",
                "LinuxAgent.AzureSecurityCenter",
                "LinuxDiagnostic",
                "LinuxPatchExtension",
                "MDE.Linux",
                "NetworkWatcherAgentLinux",
                "OmsAgentForLinux",
                "VMAccessForLinux"
            ],
            "defaultValue": "MDE.Linux",
            "type": "String",
            "metadata": {
                "description": "Choose a Linux extension from the list to monitor it in the workbook"
            }
        },
        "ExtensionLinux4": {
            "allowedValues": [
                "AADSSHLoginForLinux",
                "AzureMonitorLinuxAgent",
                "AzureSecurityLinuxAgent",
                "ChangeTracking-Linux",
                "ConfigurationforLinux",
                "DependencyAgentLinux",
                "LinuxOsUpdateExtension",
                "LinuxAgent.AzureSecurityCenter",
                "LinuxDiagnostic",
                "LinuxPatchExtension",
                "MDE.Linux",
                "NetworkWatcherAgentLinux",
                "OmsAgentForLinux",
                "VMAccessForLinux"
            ],
            "defaultValue": "ConfigurationforLinux",
            "type": "String",
            "metadata": {
                "description": "Choose a Linux extension from the list to monitor it in the workbook"
            }
        }
    },
    "variables": {
        "ExtensionWindows1Display": "[replace(replace(parameters('ExtensionWindows1'),'.',''),'-','')]",
        "ExtensionWindows2Display": "[replace(replace(parameters('ExtensionWindows2'),'.',''),'-','')]",
        "ExtensionWindows3Display": "[replace(replace(parameters('ExtensionWindows3'),'.',''),'-','')]",
        "ExtensionWindows4Display": "[replace(replace(parameters('ExtensionWindows4'),'.',''),'-','')]",
        "ExtensionsWindowsInfo": {
            "AdminCenter": {
                "DisplayName": "Windows Admin Center"
            },
            "AzureBackupWindowsWorkload": {
                "DisplayName": "Azure Backup for SQL Server"
            },
            "AzureMonitorWindowsAgent": {
                "DisplayName": "Azure Monitor Agent"
            },
            "AzureSecurityWindowsAgent": {
                "DisplayName": "Azure Security Windows Agent"
            },
            "ChangeTrackingWindows": {
                "DisplayName": "Change Traking Windows"
            },
            "CustomScriptExtension": {
                "DisplayName": "Custom Script extension"
            },
            "DependencyAgentWindows": {
                "DisplayName": "Azure Monitor for VMs (insights)"
            },
            "DSC": {
                "DisplayName": "Desired State Configuration extension"
            },
            "HybridWorkerForWindows": {
                "DisplayName": "Azure Automation Hybrid Runbook Worker extension"
            },
            "IaaSAntimalware": {
                "DisplayName": "Microsoft Antimalware extension"
            },
            "IaaSDiagnostics": {
                "DisplayName": "Azure Diagnostics Extension for Windows"
            },
            "JsonADDomainExtension": {
                "DisplayName": "JSON AD Domain Join"
            },
            "KeyVaultForWindows": {
                "DisplayName": "Azure Key Vault Certificate Sync"
            },
            "MDEWindows": {
                "DisplayName": "Microsoft Defender for Endpoint"
            },
            "MicrosoftMonitoringAgent": {
                "DisplayName": "Log Analytics agent"
            },
            "NetworkWatcherAgentWindows": {
                "DisplayName": "Network Watcher Agent"
            },
            "SqlIaaSAgent": {
                "DisplayName": "Windows SQL Server IaaS Agent"
            },
            "VMAccessagent": {
                "DisplayName": " Remote Desktop and password reset"
            },
            "WindowsAgentAzureSecurityCenter": {
                "DisplayName": "Qualys vulnerability scanner"
            },
            "WindowsAgentSqlServer": {
                "DisplayName": "Azure Extension for SQL Server"
            },
            "WindowsOsUpdateExtension": {
                "DisplayName": "UM Assessment Extension"
            },
            "WindowsPatchExtension": {
                "DisplayName": "UM Installation Extensio"
            }
        },
        "ExtensionLinux1Display": "[replace(replace(parameters('ExtensionLinux1'),'.',''),'-','')]",
        "ExtensionLinux2Display": "[replace(replace(parameters('ExtensionLinux2'),'.',''),'-','')]",
        "ExtensionLinux3Display": "[replace(replace(parameters('ExtensionLinux3'),'.',''),'-','')]",
        "ExtensionLinux4Display": "[replace(replace(parameters('ExtensionLinux4'),'.',''),'-','')]",
        "ExtensionsLinuxInfo": {
            "AADSSHLoginForLinux": {
                "DisplayName": "AAD Login for Linux"
            },
            "AzureMonitorLinuxAgent": {
                "DisplayName": "Azure Monitor Linux Agent"
            },
            "AzureSecurityLinuxAgent": {
                "DisplayName": "Azure Security Linux Agent"
            },
            "ChangeTrackingLinux": {
                "DisplayName": "Change Tracking Linux"
            },
            "ConfigurationforLinux": {
                "DisplayName": "Guest Configuration Extension"
            },
            "DependencyAgentLinux": {
                "DisplayName": "Azure Monitor for VMs (insights)"
            },
            "LinuxOsUpdateExtension": {
                "DisplayName": " Linux VM OS Updates"
            },
            "LinuxAgent.AzureSecurityCenter": {
                "DisplayName": "Qualys vulnerability scanner"
            },
            "LinuxDiagnostic": {
                "DisplayName": "Linux diagnostic extension"
            },
            "LinuxPatchExtension": {
                "DisplayName": "Linux Patch extension"
            },
            "MDELinux": {
                "DisplayName": "Microsoft Defender for Endpoint"
            },
            "NetworkWatcherAgentLinux": {
                "DisplayName": "Network Watcher Agent Extension"
            },
            "OmsAgentForLinux": {
                "DisplayName": "Log Analytics Extension forLinux"
            },
            "VMAccessForLinux": {
                "DisplayName": "VMAccess Extension"
            }
        }
    },
    "resources": [
        {
            "type": "microsoft.insights/workbooks",
            "apiVersion": "2021-03-08",
            "name": "[parameters('workbookId')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [],
            "kind": "shared",
            "properties": {
                "displayName": "[parameters('workbookDisplayName')]",
                "serializedData": "[concat('{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"tabStyle\":\"bigger\",\"links\":[{\"id\":\"5cbbbcb3-f092-4624-a639-99354cc4595d\",\"cellValue\":\"tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Extensions Windows\",\"subTarget\":\"1\",\"style\":\"link\"},{\"id\":\"d1301531-1f44-4c79-aef6-e056c569a90f\",\"cellValue\":\"tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Extensions Linux\",\"subTarget\":\"2\",\"style\":\"link\"},{\"id\":\"3f04b1b8-765f-4a79-9974-336e9f7589f6\",\"cellValue\":\"tab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"LogAnalytics\",\"subTarget\":\"3\",\"style\":\"link\"}]},\"name\":\"links - 6\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"cf72b08b-e727-4a5e-b78f-84940a9726a3\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Subscriptions\",\"type\":6,\"multiSelect\":true,\"quote\":\"''\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"includeAll\":true},\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\"},{\"id\":\"ce1d8e43-28b6-4fd4-8ebb-ad04a68d504f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"WorkSpaces\",\"type\":5,\"multiSelect\":true,\"quote\":\"''\",\"delimiter\":\",\",\"query\":\"where type =~ ''microsoft.operationalinsights/workspaces''\\r\\n| project id\",\"crossComponentResources\":[\"{Subscriptions}\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"609f90be-cab1-43d1-8724-d192dd7a9f64\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ShowOriginalTables\",\"label\":\"Show Original Tables\",\"type\":10,\"value\":\"No\",\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n    \\\"Yes\\\",\\r\\n    \\\"No\\\"\\r\\n]\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 9\"},{\"type\":1,\"content\":{\"json\":\"This workbook reflects the machines that are reporting to a Log Analytics Workspace vs. the servers that are already onboarded Azure Arc or are Azure VMs.\\r\\n\\r\\n\\r\\n\\r\\nThe result table shows the **machines reporting** in any **Log Analytics** workspace that ARE NOT **Azure VMs**, NOR **Azure Arc Machines**.\",\"style\":\"info\"},\"name\":\"text - 6\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"Heartbeat\\r\\n| summarize  arg_max(TimeGenerated,*) by Resource\\r\\n| project ResourceId, Resource, Category, ComputerIP, SCAgentChannel\\r\\n| count\\r\\n| extend Metric = \\\"Log Analytics entries\\\"\",\"size\":4,\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{WorkSpaces}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columACnMatch\":\"Metric\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Count\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"showBorder\":false}},\"customWidth\":\"50\",\"name\":\"query - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\r\\n| where type == ''microsoft.hybridcompute/machines'' or type == ''microsoft.compute/virtualmachines''\\r\\n| extend ExtensionName = tostring(properties.type)\\r\\n| count\\r\\n| extend Metric = \\\"Arc & Azure entries\\\"\",\"size\":4,\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscriptions}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"Metric\"},\"leftContent\":{\"columnMatch\":\"Count\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"}}},\"showBorder\":false}},\"customWidth\":\"50\",\"name\":\"query - 5\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"Heartbeat\\r\\n| summarize  arg_max(TimeGenerated,*) by Resource\\r\\n| project ResourceId, Resource, Category, ComputerIP, SCAgentChannel,TimeGenerated\\r\\n| sort by Resource asc\",\"size\":0,\"title\":\"Query Log Analytics for MMA\",\"timeContext\":{\"durationMs\":86400000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{WorkSpaces}\"],\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibility\":{\"parameterName\":\"ShowOriginalTables\",\"comparison\":\"isEqualTo\",\"value\":\"Yes\"},\"name\":\"Query - LA\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\r\\n| where type == ''microsoft.hybridcompute/machines'' or type == ''microsoft.compute/virtualmachines''\\r\\n| extend ExtensionName = tostring(properties.type)\\r\\n| project id,name\",\"size\":0,\"title\":\"Query Resource Graph for Machines\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"value::all\"],\"gridSettings\":{\"rowLimit\":10000,\"filter\":true}},\"conditionalVisibility\":{\"parameterName\":\"ShowOriginalTables\",\"comparison\":\"isEqualTo\",\"value\":\"Yes\"},\"name\":\"Query Graph\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"{\\\"version\\\":\\\"Merge/1.0\\\",\\\"merges\\\":[{\\\"id\\\":\\\"ffbd6be0-0895-45b7-81a1-99b7222b60bd\\\",\\\"mergeType\\\":\\\"leftanti\\\",\\\"leftTable\\\":\\\"Query - LA\\\",\\\"rightTable\\\":\\\"Query Graph\\\",\\\"leftColumn\\\":\\\"Resource\\\",\\\"rightColumn\\\":\\\"name\\\"}],\\\"projectRename\\\":[{\\\"originalName\\\":\\\"ResourceId\\\",\\\"mergedName\\\":\\\"ResourceId\\\",\\\"fromId\\\":\\\"unknown\\\"},{\\\"originalName\\\":\\\"Resource\\\",\\\"mergedName\\\":\\\"Resource\\\",\\\"fromId\\\":\\\"unknown\\\"},{\\\"originalName\\\":\\\"Category\\\",\\\"mergedName\\\":\\\"Category\\\",\\\"fromId\\\":\\\"unknown\\\"},{\\\"originalName\\\":\\\"ComputerIP\\\",\\\"mergedName\\\":\\\"ComputerIP\\\",\\\"fromId\\\":\\\"unknown\\\"},{\\\"originalName\\\":\\\"SCAgentChannel\\\",\\\"mergedName\\\":\\\"SCAgentChannel\\\",\\\"fromId\\\":\\\"unknown\\\"},{\\\"originalName\\\":\\\"[Query - LA].ResourceId\\\",\\\"mergedName\\\":\\\"Resource Id\\\",\\\"fromId\\\":\\\"ffbd6be0-0895-45b7-81a1-99b7222b60bd\\\"},{\\\"originalName\\\":\\\"[Query - LA].Resource\\\",\\\"mergedName\\\":\\\"Resource Name\\\",\\\"fromId\\\":\\\"ffbd6be0-0895-45b7-81a1-99b7222b60bd\\\"},{\\\"originalName\\\":\\\"[Query - LA].Category\\\",\\\"mergedName\\\":\\\"Category1\\\",\\\"fromId\\\":\\\"ffbd6be0-0895-45b7-81a1-99b7222b60bd\\\"},{\\\"originalName\\\":\\\"[Query - LA].ComputerIP\\\",\\\"mergedName\\\":\\\"ComputerIP1\\\",\\\"fromId\\\":\\\"ffbd6be0-0895-45b7-81a1-99b7222b60bd\\\"},{\\\"originalName\\\":\\\"[Query - LA].SCAgentChannel\\\",\\\"mergedName\\\":\\\"SCAgentChannel1\\\",\\\"fromId\\\":\\\"ffbd6be0-0895-45b7-81a1-99b7222b60bd\\\"},{\\\"originalName\\\":\\\"[Query - LA].TimeGenerated\\\",\\\"mergedName\\\":\\\"TimeGenerated\\\",\\\"fromId\\\":\\\"unknown\\\"}]}\",\"size\":0,\"title\":\"Machines in Log Analytics but not in Arc nor in Azure VMs\",\"queryType\":7,\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":2}]},\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":2}]},\"showPin\":false,\"name\":\"query - 2\"}]},\"conditionalVisibility\":{\"parameterName\":\"tab\",\"comparison\":\"isEqualTo\",\"value\":\"3\"},\"name\":\"Log Analytics\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"value::all\"],\"parameters\":[{\"id\":\"cf72b08b-e727-4a5e-b78f-84940a9726a3\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Subscriptions\",\"type\":6,\"multiSelect\":true,\"quote\":\"''\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"includeAll\":true},\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\"},{\"id\":\"cc87c729-ab54-440b-bdc6-00580dbbc0be\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"MachineType\",\"label\":\"Machine Type\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"''\",\"delimiter\":\",\",\"value\":[\"microsoft.hybridcompute/machines\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"jsonData\":\"[\\r\\n {\\\"value\\\": \\\"microsoft.hybridcompute/machines\\\", \\\"label\\\": \\\"Azure Arc Servers\\\"},\\r\\n {\\\"value\\\": \\\"microsoft.compute/virtualmachines\\\", \\\"label\\\": \\\"Azure Vms\\\"}\\r\\n]\\r\\n\",\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\"},{\"id\":\"d0ee4503-c907-4b87-ba8c-f374f758ffb7\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DiscoveredExtensions\",\"label\":\"Discovered Extensions\",\"type\":1,\"isRequired\":true,\"query\":\"resources\\r\\n| where type == ''microsoft.hybridcompute/machines/extensions'' or type == ''microsoft.compute/virtualmachines/extensions''\\r\\n| extend ExtensionName = tostring(properties.type)\\r\\n| distinct  ExtensionName\\r\\n| where ExtensionName notlike \\\"Linux\\\"\",\"crossComponentResources\":[\"{Subscriptions}\"],\"typeSettings\":{\"multiLineText\":true,\"editorLanguage\":\"text\",\"multiLineHeight\":3},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"d04170e7-feef-4d3d-9789-ff697c6133bc\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ServerStatus\",\"type\":2,\"multiSelect\":true,\"quote\":\"''\",\"delimiter\":\",\",\"query\":\"resources\\r\\n| where type == ''microsoft.compute/virtualmachines'' or type == ''microsoft.hybridcompute/machines''\\r\\n| extend ServerStatus = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.status), tostring((properties.extended.instanceView).powerState.displayStatus))\\r\\n| distinct ServerStatus\",\"crossComponentResources\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"}],\"style\":\"pills\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"name\":\"parameters - 8\"},{\"type\":1,\"content\":{\"json\":\"# Azure Arc Servers & VMs Extensions (Windows)\\r\\n\"},\"conditionalVisibility\":{\"parameterName\":\"tab\",\"comparison\":\"isEqualTo\",\"value\":\"1\"},\"name\":\"text - 0 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\r\\n| where type in ({MachineType})\\r\\n| extend\\r\\n    JoinID = toupper(id),\\r\\n    OSType = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osType), tolower(tostring((properties.storageProfile).osDisk.osType))),\\r\\n    ServerStatus = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.status), tostring((properties.extended.instanceView).powerState.displayStatus))\\r\\n| where ServerStatus in ({ServerStatus})\\r\\n| join kind=leftouter(\\r\\n    resources\\r\\n| where type == ''microsoft.hybridcompute/machines/extensions'' or type == ''microsoft.compute/virtualmachines/extensions''\\r\\n| where properties.type in (''',parameters('ExtensionWindows1'),''',''',parameters('ExtensionWindows2'),''',''',parameters('ExtensionWindows3'),''',''',parameters('ExtensionWindows4'),''')\\r\\n| extend\\r\\n        VMId = toupper(substring(id, 0, indexof(id, ''/extensions''))),\\r\\n        ExtensionName = tostring(properties.type),\\r\\n\\t\\tStatus = tostring (properties.provisioningState)\\r\\n) on $left.JoinID == $right.VMId\\r\\n| where OSType in (''windows'')\\r\\n| extend Serverid = id\\r\\n| extend ProvisionState = pack(ExtensionName, Status)\\r\\n| summarize ExtProvision = make_bag(ProvisionState) by Serverid, OSType, ServerStatus\\r\\n| extend ',variables('ExtensionWindows1Display'),' = (parse_json(ExtProvision)).[''',parameters('ExtensionWindows1'),''']\\r\\n| project ',variables('ExtensionWindows1Display'),'\\r\\n| summarize count() by tostring(',variables('ExtensionWindows1Display'),')\",\"size\":3,\"title\":\"',variables('ExtensionsWindowsInfo')[variables('ExtensionWindows1Display')].DisplayName,'\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscriptions}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Succeeded\",\"color\":\"green\",\"comment\":\"\"},{\"seriesName\":\"\",\"label\":\"Not Present\",\"color\":\"gray\"},{\"seriesName\":\"Failed\",\"color\":\"red\"},{\"seriesName\":\"Deleting\",\"color\":\"redBright\"}]}},\"customWidth\":\"25\",\"name\":\"ExtensionWindows1Pie\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\r\\n| where type in ({MachineType})\\r\\n| extend\\r\\n    JoinID = toupper(id),\\r\\n    OSType = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osType), tolower(tostring((properties.storageProfile).osDisk.osType))),\\r\\n    ServerStatus = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.status), tostring((properties.extended.instanceView).powerState.displayStatus))\\r\\n| where ServerStatus in ({ServerStatus})\\r\\n| join kind=leftouter(\\r\\n    resources\\r\\n| where type == ''microsoft.hybridcompute/machines/extensions'' or type == ''microsoft.compute/virtualmachines/extensions''\\r\\n| where properties.type in (''',parameters('ExtensionWindows1'),''',''',parameters('ExtensionWindows2'),''',''',parameters('ExtensionWindows3'),''',''',parameters('ExtensionWindows4'),''')\\r\\n| extend\\r\\n        VMId = toupper(substring(id, 0, indexof(id, ''/extensions''))),\\r\\n        ExtensionName = tostring(properties.type),\\r\\n\\t\\tStatus = tostring (properties.provisioningState)\\r\\n) on $left.JoinID == $right.VMId\\r\\n| where OSType in (''windows'')\\r\\n| extend Serverid = id\\r\\n| extend ProvisionState = pack(ExtensionName, Status)\\r\\n| summarize ExtProvision = make_bag(ProvisionState) by Serverid, OSType, ServerStatus\\r\\n| extend ',variables('ExtensionWindows2Display'),' = (parse_json(ExtProvision)).[''',parameters('ExtensionWindows2'),''']\\r\\n| project ',variables('ExtensionWindows2Display'),'\\r\\n| summarize count() by tostring(',variables('ExtensionWindows2Display'),')\",\"size\":3,\"title\":\"',variables('ExtensionsWindowsInfo')[variables('ExtensionWindows2Display')].DisplayName,'\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscriptions}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Succeeded\",\"color\":\"green\"},{\"seriesName\":\"\",\"label\":\"Not Present\",\"color\":\"gray\"},{\"seriesName\":\"Failed\",\"color\":\"red\"},{\"seriesName\":\"Deleting\",\"color\":\"redBright\"}]}},\"customWidth\":\"25\",\"name\":\"ExtensionWindows2Pie\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\r\\n| where type in ({MachineType})\\r\\n| extend\\r\\n    JoinID = toupper(id),\\r\\n    OSType = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osType), tolower(tostring((properties.storageProfile).osDisk.osType))),\\r\\n    ServerStatus = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.status), tostring((properties.extended.instanceView).powerState.displayStatus))\\r\\n| where ServerStatus in ({ServerStatus})\\r\\n| join kind=leftouter(\\r\\n    resources\\r\\n| where type == ''microsoft.hybridcompute/machines/extensions'' or type == ''microsoft.compute/virtualmachines/extensions''\\r\\n| where properties.type in (''',parameters('ExtensionWindows1'),''',''',parameters('ExtensionWindows2'),''',''',parameters('ExtensionWindows3'),''',''',parameters('ExtensionWindows4'),''')\\r\\n| extend\\r\\n        VMId = toupper(substring(id, 0, indexof(id, ''/extensions''))),\\r\\n        ExtensionName = tostring(properties.type),\\r\\n\\t\\tStatus = tostring (properties.provisioningState)\\r\\n) on $left.JoinID == $right.VMId\\r\\n| where OSType in (''windows'')\\r\\n| extend Serverid = id\\r\\n| extend ProvisionState = pack(ExtensionName, Status)\\r\\n| summarize ExtProvision = make_bag(ProvisionState) by Serverid, OSType, ServerStatus\\r\\n| extend ',variables('ExtensionWindows3Display'),' = (parse_json(ExtProvision)).[''',parameters('ExtensionWindows3'),''']\\r\\n| project ',variables('ExtensionWindows3Display'),'\\r\\n| summarize count() by tostring(',variables('ExtensionWindows3Display'),')\",\"size\":3,\"title\":\"',variables('ExtensionsWindowsInfo')[variables('ExtensionWindows3Display')].DisplayName,'\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscriptions}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Succeeded\",\"label\":\"\",\"color\":\"green\"},{\"seriesName\":\"\",\"label\":\"Not Present\",\"color\":\"gray\"},{\"seriesName\":\"Failed\",\"color\":\"red\"},{\"seriesName\":\"Deleting\",\"color\":\"redBright\"}]}},\"customWidth\":\"25\",\"name\":\"ExtensionWindows3Pie\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\r\\n| where type in ({MachineType})\\r\\n| extend\\r\\n    JoinID = toupper(id),\\r\\n    OSType = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osType), tolower(tostring((properties.storageProfile).osDisk.osType))),\\r\\n    ServerStatus = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.status), tostring((properties.extended.instanceView).powerState.displayStatus))\\r\\n| where ServerStatus in ({ServerStatus})\\r\\n| join kind=leftouter(\\r\\n    resources\\r\\n| where type == ''microsoft.hybridcompute/machines/extensions'' or type == ''microsoft.compute/virtualmachines/extensions''\\r\\n| where properties.type in (''',parameters('ExtensionWindows1'),''',''',parameters('ExtensionWindows2'),''',''',parameters('ExtensionWindows3'),''',''',parameters('ExtensionWindows4'),''')\\r\\n| extend\\r\\n        VMId = toupper(substring(id, 0, indexof(id, ''/extensions''))),\\r\\n        ExtensionName = tostring(properties.type),\\r\\n\\t\\tStatus = tostring (properties.provisioningState)\\r\\n) on $left.JoinID == $right.VMId\\r\\n| where OSType in (''windows'')\\r\\n| extend Serverid = id\\r\\n| extend ProvisionState = pack(ExtensionName, Status)\\r\\n| summarize ExtProvision = make_bag(ProvisionState) by Serverid, OSType, ServerStatus\\r\\n| extend ',variables('ExtensionWindows4Display'),' = (parse_json(ExtProvision)).[''',parameters('ExtensionWindows4'),''']\\r\\n| project ',variables('ExtensionWindows4Display'),'\\r\\n| summarize count() by tostring(',variables('ExtensionWindows4Display'),')\",\"size\":3,\"title\":\"',variables('ExtensionsWindowsInfo')[variables('ExtensionWindows4Display')].DisplayName,'\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscriptions}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Succeeded\",\"color\":\"green\"},{\"seriesName\":\"\",\"label\":\"Not Present\",\"color\":\"gray\"},{\"seriesName\":\"Failed\",\"color\":\"red\"},{\"seriesName\":\"Deleting\",\"color\":\"redBright\"}]}},\"customWidth\":\"25\",\"name\":\"ExtensionWindows4Pie\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"889211ce-4505-429c-a299-f0970e98d488\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"',variables('ExtensionWindows1Display'),'status','\",\"type\":10,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n {\\\"value\\\": \\\"Succeeded\\\", \\\"label\\\": \\\"Succeeded\\\"},\\r\\n {\\\"value\\\": \\\"Creating\\\", \\\"label\\\": \\\"Creating\\\"},\\r\\n {\\\"value\\\": \\\"Updating\\\", \\\"label\\\": \\\"Updating\\\"},\\r\\n {\\\"value\\\": \\\"Deleting\\\", \\\"label\\\": \\\"Deleting\\\"},\\r\\n {\\\"value\\\": \\\"Failed\\\", \\\"label\\\": \\\"Failed\\\"},\\r\\n {\\\"value\\\": \\\"<blank>\\\", \\\"label\\\": \\\"NotPresent\\\"}\\r\\n]\\r\\n\",\"timeContext\":{\"durationMs\":86400000}},{\"id\":\"6f86635c-a9d5-4f36-8de3-d9728299b636\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"',variables('ExtensionWindows2Display'),'status','\",\"type\":10,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n {\\\"value\\\": \\\"Succeeded\\\", \\\"label\\\": \\\"Succeeded\\\"},\\r\\n {\\\"value\\\": \\\"Creating\\\", \\\"label\\\": \\\"Creating\\\"},\\r\\n {\\\"value\\\": \\\"Updating\\\", \\\"label\\\": \\\"Updating\\\"},\\r\\n {\\\"value\\\": \\\"Deleting\\\", \\\"label\\\": \\\"Deleting\\\"},\\r\\n {\\\"value\\\": \\\"Failed\\\", \\\"label\\\": \\\"Failed\\\"},\\r\\n {\\\"value\\\": \\\"<blank>\\\", \\\"label\\\": \\\"NotPresent\\\"}\\r\\n]\",\"timeContext\":{\"durationMs\":86400000}},{\"id\":\"e4b863cf-239a-4f8c-b750-80d41a48bd1f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"',variables('ExtensionWindows3Display'),'status','\",\"type\":10,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n {\\\"value\\\": \\\"Succeeded\\\", \\\"label\\\": \\\"Succeeded\\\"},\\r\\n {\\\"value\\\": \\\"Creating\\\", \\\"label\\\": \\\"Creating\\\"},\\r\\n {\\\"value\\\": \\\"Updating\\\", \\\"label\\\": \\\"Updating\\\"},\\r\\n {\\\"value\\\": \\\"Deleting\\\", \\\"label\\\": \\\"Deleting\\\"},\\r\\n {\\\"value\\\": \\\"Failed\\\", \\\"label\\\": \\\"Failed\\\"},\\r\\n {\\\"value\\\": \\\"<blank>\\\", \\\"label\\\": \\\"NotPresent\\\"}\\r\\n]\",\"timeContext\":{\"durationMs\":86400000}},{\"id\":\"8836930c-1bea-4fc5-9177-e20696478fdd\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"',variables('ExtensionWindows4Display'),'status','\",\"type\":10,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n {\\\"value\\\": \\\"Succeeded\\\", \\\"label\\\": \\\"Succeeded\\\"},\\r\\n {\\\"value\\\": \\\"Creating\\\", \\\"label\\\": \\\"Creating\\\"},\\r\\n {\\\"value\\\": \\\"Updating\\\", \\\"label\\\": \\\"Updating\\\"},\\r\\n {\\\"value\\\": \\\"Deleting\\\", \\\"label\\\": \\\"Deleting\\\"},\\r\\n {\\\"value\\\": \\\"Failed\\\", \\\"label\\\": \\\"Failed\\\"},\\r\\n {\\\"value\\\": \\\"<blank>\\\", \\\"label\\\": \\\"NotPresent\\\"}\\r\\n]\",\"timeContext\":{\"durationMs\":86400000}}],\"style\":\"formHorizontal\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"name\":\"parameters - 8\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\r\\n| where type in ({MachineType})\\r\\n| extend\\r\\n    JoinID = toupper(id),\\r\\n    OSType = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osName), tolower(tostring((properties.storageProfile).osDisk.osType))),\\r\\n    ServerStatus = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.status), tostring((properties.extended.instanceView).powerState.displayStatus))\\r\\n| where ServerStatus in ({ServerStatus})\\r\\n| join kind=leftouter(\\r\\n    resources\\r\\n| where type == ''microsoft.hybridcompute/machines/extensions'' or type == ''microsoft.compute/virtualmachines/extensions''\\r\\n| where properties.type in (''',parameters('ExtensionWindows1'),''',''',parameters('ExtensionWindows2'),''',''',parameters('ExtensionWindows3'),''',''',parameters('ExtensionWindows4'),''')\\r\\n| extend\\r\\n        VMId = toupper(substring(id, 0, indexof(id, ''/extensions''))),\\r\\n        ExtensionName = tostring(properties.type),\\r\\n\\t\\tVersion = tostring(properties.instanceView.typeHandlerVersion),\\r\\n\\t\\tStatus = tostring (properties.provisioningState)\\r\\n) on $left.JoinID == $right.VMId\\r\\n| where OSType in (''windows'')\\r\\n| extend ArcServer = id\\r\\n| extend ProvisionState = pack(ExtensionName, Status)\\r\\n| summarize ExtProvision = make_bag(ProvisionState) by ArcServer, OSType, ServerStatus\\r\\n| extend ',variables('ExtensionWindows1Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionWindows1'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionWindows1'),'''],\\\"<blank>\\\")\\r\\n| extend ',variables('ExtensionWindows2Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionWindows2'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionWindows2'),'''],\\\"<blank>\\\")\\r\\n| extend ',variables('ExtensionWindows3Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionWindows3'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionWindows3'),'''],\\\"<blank>\\\")\\r\\n| extend ',variables('ExtensionWindows4Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionWindows4'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionWindows4'),'''],\\\"<blank>\\\")\\r\\n| where \\\"{',variables('ExtensionWindows1Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionWindows1Display'),' == \\\"{',variables('ExtensionWindows1Display'),'status',':value}\\\"\\r\\n| where \\\"{',variables('ExtensionWindows2Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionWindows2Display'),' == \\\"{',variables('ExtensionWindows2Display'),'status',':value}\\\"\\r\\n| where \\\"{',variables('ExtensionWindows3Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionWindows3Display'),' == \\\"{',variables('ExtensionWindows3Display'),'status',':value}\\\"\\r\\n| where \\\"{',variables('ExtensionWindows4Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionWindows4Display'),' == \\\"{',variables('ExtensionWindows4Display'),'status',':value}\\\"\\r\\n| count\\r\\n| extend Metric=\\\"Total of Servers filtered.\\\"\",\"size\":3,\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscriptions}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Metric\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Count\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}}},\"customWidth\":\"25\",\"name\":\"query - 9\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\r\\n| where type in ({MachineType})\\r\\n| extend\\r\\n    JoinID = toupper(id),\\r\\n\\tOSName = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osProfile.computerName), tostring((properties.extended.instanceView).computerName)),\\r\\n    OSType = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osName), tolower(tostring((properties.storageProfile).osDisk.osType))),\\r\\n    OSsku = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osSku), tostring((properties.extended.instanceView).osName)),\\r\\n    ServerStatus = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.status), tostring((properties.extended.instanceView).powerState.displayStatus))\\r\\n| where ServerStatus in ({ServerStatus})\\r\\n| join kind=leftouter(\\r\\n    resources\\r\\n| where type == ''microsoft.hybridcompute/machines/extensions'' or type == ''microsoft.compute/virtualmachines/extensions''\\r\\n| where properties.type in (''',parameters('ExtensionWindows1'),''',''',parameters('ExtensionWindows2'),''',''',parameters('ExtensionWindows3'),''',''',parameters('ExtensionWindows4'),''')\\r\\n| extend\\r\\n        VMId = toupper(substring(id, 0, indexof(id, ''/extensions''))),\\r\\n        ExtensionName = tostring(properties.type),\\r\\n        Version = iff( type  == ''microsoft.hybridcompute/machines/extensions'', tostring(properties.instanceView.typeHandlerVersion), tostring(properties.typeHandlerVersion)),\\r\\n\\t\\tStatus = tostring (properties.provisioningState)\\r\\n) on $left.JoinID == $right.VMId\\r\\n| where OSType in (''windows'')\\r\\n| extend ServerName = id\\r\\n| extend VersionNumber = pack(ExtensionName, Version)\\r\\n| extend ProvisionState = pack(ExtensionName, Status)\\r\\n| summarize ExtVersions = make_bag(VersionNumber),ExtProvision = make_bag(ProvisionState) by ServerName, OSType, OSName,OSsku, ServerStatus\\r\\n| extend ',variables('ExtensionWindows1Display'),'version',' = tostring((parse_json(ExtVersions)).[''',parameters('ExtensionWindows1'),''']), ',variables('ExtensionWindows1Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionWindows1'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionWindows1'),'''],\\\"<blank>\\\")\\r\\n| extend ',variables('ExtensionWindows2Display'),'version',' = tostring((parse_json(ExtVersions)).[''',parameters('ExtensionWindows2'),''']), ',variables('ExtensionWindows2Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionWindows2'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionWindows2'),'''],\\\"<blank>\\\")\\r\\n| extend ',variables('ExtensionWindows3Display'),'version',' = tostring((parse_json(ExtVersions)).[''',parameters('ExtensionWindows3'),''']), ',variables('ExtensionWindows3Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionWindows3'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionWindows3'),'''],\\\"<blank>\\\")\\r\\n| extend ',variables('ExtensionWindows4Display'),'version',' = tostring((parse_json(ExtVersions)).[''',parameters('ExtensionWindows4'),''']), ',variables('ExtensionWindows4Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionWindows4'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionWindows4'),'''],\\\"<blank>\\\")\\r\\n| where \\\"{',variables('ExtensionWindows1Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionWindows1Display'),' == \\\"{',variables('ExtensionWindows1Display'),'status',':value}\\\"\\r\\n| where \\\"{',variables('ExtensionWindows2Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionWindows2Display'),' == \\\"{',variables('ExtensionWindows2Display'),'status',':value}\\\"\\r\\n| where \\\"{',variables('ExtensionWindows3Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionWindows3Display'),' == \\\"{',variables('ExtensionWindows3Display'),'status',':value}\\\"\\r\\n| where \\\"{',variables('ExtensionWindows4Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionWindows4Display'),' == \\\"{',variables('ExtensionWindows4Display'),'status',':value}\\\"\\r\\n| project ServerName, OSsku, ServerStatus, OSType,\\r\\n',variables('ExtensionWindows1Display'),',',variables('ExtensionWindows1Display'),'version',', \\r\\n',variables('ExtensionWindows2Display'),',',variables('ExtensionWindows2Display'),'version',',\\r\\n',variables('ExtensionWindows3Display'),',',variables('ExtensionWindows3Display'),'version',',\\r\\n',variables('ExtensionWindows4Display'),',',variables('ExtensionWindows4Display'),'version',' \\r\\n| sort by ',variables('ExtensionWindows1Display'),'version','\",\"size\":2,\"showExportToExcel\":true,\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscriptions}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ServerName\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"21.5714ch\"}},{\"columnMatch\":\"OSsku\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"34.4286ch\"}},{\"columnMatch\":\"ServerStatus\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"18ch\"}},{\"columnMatch\":\"',variables('ExtensionWindows1Display'),'\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"<blank>\",\"text\":\"\"},{\"operator\":\"!=\",\"thresholdValue\":\"Succeeded\",\"representation\":\"3\",\"text\":\"[\\\"',variables('ExtensionWindows1Display'),'version','\\\"] ({0})\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"[\\\"',variables('ExtensionWindows1Display'),'version','\\\"]\"}]}},{\"columnMatch\":\"',variables('ExtensionWindows1Display'),'version','\",\"formatter\":5},{\"columnMatch\":\"',variables('ExtensionWindows2Display'),'\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"<blank>\",\"text\":\"\"},{\"operator\":\"!=\",\"thresholdValue\":\"Succeeded\",\"representation\":\"3\",\"text\":\"[\\\"',variables('ExtensionWindows2Display'),'version','\\\"] ({0})\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"[\\\"',variables('ExtensionWindows2Display'),'version','\\\"]\"}]}},{\"columnMatch\":\"',variables('ExtensionWindows2Display'),'version','\",\"formatter\":5},{\"columnMatch\":\"',variables('ExtensionWindows3Display'),'\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"<blank>\",\"text\":\"\"},{\"operator\":\"!=\",\"thresholdValue\":\"Succeeded\",\"representation\":\"3\",\"text\":\"[\\\"',variables('ExtensionWindows3Display'),'version','\\\"] ({0})\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"[\\\"',variables('ExtensionWindows3Display'),'version','\\\"]\"}]}},{\"columnMatch\":\"',variables('ExtensionWindows3Display'),'version','\",\"formatter\":5},{\"columnMatch\":\"',variables('ExtensionWindows4Display'),'\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"<blank>\",\"text\":\"\"},{\"operator\":\"!=\",\"thresholdValue\":\"Succeeded\",\"representation\":\"3\",\"text\":\"[\\\"',variables('ExtensionWindows4Display'),'version','\\\"]({0})\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"[\\\"',variables('ExtensionWindows4Display'),'version','\\\"]\"}]}},{\"columnMatch\":\"',variables('ExtensionWindows4Display'),'version','\",\"formatter\":5},{\"columnMatch\":\"OmsAgentForLinux\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"is Empty\",\"text\":\"{0}{1}\"},{\"operator\":\"!=\",\"thresholdValue\":\"Succeeded\",\"representation\":\"3\",\"text\":\"[\\\"OmsAgentForLinuxversion\\\"] ({0})\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"[\\\"OmsAgentForLinuxversion\\\"]\"}]}},{\"columnMatch\":\"OmsAgentForLinuxversion\",\"formatter\":5},{\"columnMatch\":\"DependencyAgentLinux\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"is Empty\",\"text\":\"{0}{1}\"},{\"operator\":\"!=\",\"thresholdValue\":\"Succeeded\",\"representation\":\"3\",\"text\":\"[\\\"DependencyAgentLinuxversion\\\"] ({0})\"},{\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"[\\\"DependencyAgentLinuxversion\\\"]\"}]}},{\"columnMatch\":\"DependencyAgentLinuxversion\",\"formatter\":5}],\"rowLimit\":2000,\"filter\":true},\"sortBy\":[]},\"name\":\"query - 5\"}]},\"conditionalVisibility\":{\"parameterName\":\"tab\",\"comparison\":\"isEqualTo\",\"value\":\"1\"},\"name\":\"Group - Extensions Windows\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"value::all\"],\"parameters\":[{\"id\":\"cf72b08b-e727-4a5e-b78f-84940a9726a3\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Subscriptions\",\"type\":6,\"multiSelect\":true,\"quote\":\"''\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"includeAll\":true},\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\"},{\"id\":\"cc87c729-ab54-440b-bdc6-00580dbbc0be\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"MachineType\",\"label\":\"Machine Type\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"''\",\"delimiter\":\",\",\"value\":[\"microsoft.hybridcompute/machines\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"jsonData\":\"[\\r\\n {\\\"value\\\": \\\"microsoft.hybridcompute/machines\\\", \\\"label\\\": \\\"Azure Arc Servers\\\"},\\r\\n {\\\"value\\\": \\\"microsoft.compute/virtualmachines\\\", \\\"label\\\": \\\"Azure Vms\\\"}\\r\\n]\\r\\n\",\"timeContext\":{\"durationMs\":86400000},\"defaultValue\":\"value::all\"},{\"id\":\"d0ee4503-c907-4b87-ba8c-f374f758ffb7\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DiscoveredExtensions\",\"label\":\"Discovered Extensions\",\"type\":1,\"isRequired\":true,\"query\":\"resources\\r\\n| where type == ''microsoft.hybridcompute/machines/extensions'' or type == ''microsoft.compute/virtualmachines/extensions''\\r\\n| extend ExtensionName = tostring(properties.type)\\r\\n| distinct  ExtensionName\\r\\n| where ExtensionName like \\\"Linux\\\"\",\"crossComponentResources\":[\"{Subscriptions}\"],\"typeSettings\":{\"multiLineText\":true,\"editorLanguage\":\"text\",\"multiLineHeight\":3},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"d04170e7-feef-4d3d-9789-ff697c6133bc\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"ServerStatus\",\"type\":2,\"multiSelect\":true,\"quote\":\"''\",\"delimiter\":\",\",\"query\":\"resources\\r\\n| where type == ''microsoft.compute/virtualmachines'' or type == ''microsoft.hybridcompute/machines''\\r\\n| extend ServerStatus = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.status), tostring((properties.extended.instanceView).powerState.displayStatus))\\r\\n| distinct ServerStatus\",\"crossComponentResources\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"defaultValue\":\"value::all\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"}],\"style\":\"pills\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"name\":\"parameters - 8\"},{\"type\":1,\"content\":{\"json\":\"# Azure Arc Servers & VMs Extensions (Linux)\\r\\n\"},\"conditionalVisibility\":{\"parameterName\":\"tab\",\"comparison\":\"isEqualTo\",\"value\":\"2\"},\"name\":\"text - 0 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\r\\n| where type in ({MachineType})\\r\\n| extend\\r\\n    JoinID = toupper(id),\\r\\n    OSType = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osType), tolower(tostring((properties.storageProfile).osDisk.osType))),\\r\\n    ServerStatus = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.status), tostring((properties.extended.instanceView).powerState.displayStatus))\\r\\n| where ServerStatus in ({ServerStatus})\\r\\n| join kind=leftouter(\\r\\n    resources\\r\\n| where type == ''microsoft.hybridcompute/machines/extensions'' or type == ''microsoft.compute/virtualmachines/extensions''\\r\\n| where properties.type in (''',parameters('ExtensionLinux1'),''',''',parameters('ExtensionLinux2'),''',''',parameters('ExtensionLinux3'),''',''',parameters('ExtensionLinux4'),''')\\r\\n| extend\\r\\n        VMId = toupper(substring(id, 0, indexof(id, ''/extensions''))),\\r\\n        ExtensionName = tostring(properties.type),\\r\\n\\t\\tStatus = tostring (properties.provisioningState)\\r\\n) on $left.JoinID == $right.VMId\\r\\n| where OSType in (''linux'')\\r\\n| extend Serverid = id\\r\\n| extend ProvisionState = pack(ExtensionName, Status)\\r\\n| summarize ExtProvision = make_bag(ProvisionState) by Serverid, OSType, ServerStatus\\r\\n| extend ',variables('ExtensionLinux1Display'),' = (parse_json(ExtProvision)).[''',parameters('ExtensionLinux1'),''']\\r\\n| project ',variables('ExtensionLinux1Display'),'\\r\\n| summarize count() by tostring(',variables('ExtensionLinux1Display'),')\",\"size\":3,\"title\":\"',variables('ExtensionsLinuxInfo')[variables('ExtensionLinux1Display')].DisplayName,'\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscriptions}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Succeeded\",\"color\":\"green\",\"comment\":\"\"},{\"seriesName\":\"\",\"label\":\"Not Present\",\"color\":\"gray\"},{\"seriesName\":\"Failed\",\"color\":\"red\"},{\"seriesName\":\"Deleting\",\"color\":\"redBright\"}]}},\"customWidth\":\"25\",\"name\":\"ExtensionLinux1Pie\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\r\\n| where type in ({MachineType})\\r\\n| extend\\r\\n    JoinID = toupper(id),\\r\\n    OSType = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osType), tolower(tostring((properties.storageProfile).osDisk.osType))),\\r\\n    ServerStatus = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.status), tostring((properties.extended.instanceView).powerState.displayStatus))\\r\\n| where ServerStatus in ({ServerStatus})\\r\\n| join kind=leftouter(\\r\\n    resources\\r\\n| where type == ''microsoft.hybridcompute/machines/extensions'' or type == ''microsoft.compute/virtualmachines/extensions''\\r\\n| where properties.type in (''',parameters('ExtensionLinux1'),''',''',parameters('ExtensionLinux2'),''',''',parameters('ExtensionLinux3'),''',''',parameters('ExtensionLinux4'),''')\\r\\n| extend\\r\\n        VMId = toupper(substring(id, 0, indexof(id, ''/extensions''))),\\r\\n        ExtensionName = tostring(properties.type),\\r\\n\\t\\tStatus = tostring (properties.provisioningState)\\r\\n) on $left.JoinID == $right.VMId\\r\\n| where OSType in (''linux'')\\r\\n| extend Serverid = id\\r\\n| extend ProvisionState = pack(ExtensionName, Status)\\r\\n| summarize ExtProvision = make_bag(ProvisionState) by Serverid, OSType, ServerStatus\\r\\n| extend ',variables('ExtensionLinux2Display'),' = (parse_json(ExtProvision)).[''',parameters('ExtensionLinux2'),''']\\r\\n| project ',variables('ExtensionLinux2Display'),'\\r\\n| summarize count() by tostring(',variables('ExtensionLinux2Display'),')\",\"size\":3,\"title\":\"',variables('ExtensionsLinuxInfo')[variables('ExtensionLinux2Display')].DisplayName,'\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscriptions}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Succeeded\",\"color\":\"green\"},{\"seriesName\":\"\",\"label\":\"Not Present\",\"color\":\"gray\"},{\"seriesName\":\"Failed\",\"color\":\"red\"},{\"seriesName\":\"Deleting\",\"color\":\"redBright\"}]}},\"customWidth\":\"25\",\"name\":\"ExtensionLinux2Pie\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\r\\n| where type in ({MachineType})\\r\\n| extend\\r\\n    JoinID = toupper(id),\\r\\n    OSType = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osType), tolower(tostring((properties.storageProfile).osDisk.osType))),\\r\\n    ServerStatus = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.status), tostring((properties.extended.instanceView).powerState.displayStatus))\\r\\n| where ServerStatus in ({ServerStatus})\\r\\n| join kind=leftouter(\\r\\n    resources\\r\\n| where type == ''microsoft.hybridcompute/machines/extensions'' or type == ''microsoft.compute/virtualmachines/extensions''\\r\\n| where properties.type in (''',parameters('ExtensionLinux1'),''',''',parameters('ExtensionLinux2'),''',''',parameters('ExtensionLinux3'),''',''',parameters('ExtensionLinux4'),''')\\r\\n| extend\\r\\n        VMId = toupper(substring(id, 0, indexof(id, ''/extensions''))),\\r\\n        ExtensionName = tostring(properties.type),\\r\\n\\t\\tStatus = tostring (properties.provisioningState)\\r\\n) on $left.JoinID == $right.VMId\\r\\n| where OSType in (''linux'')\\r\\n| extend Serverid = id\\r\\n| extend ProvisionState = pack(ExtensionName, Status)\\r\\n| summarize ExtProvision = make_bag(ProvisionState) by Serverid, OSType, ServerStatus\\r\\n| extend ',variables('ExtensionLinux3Display'),' = (parse_json(ExtProvision)).[''',parameters('ExtensionLinux3'),''']\\r\\n| project ',variables('ExtensionLinux3Display'),'\\r\\n| summarize count() by tostring(',variables('ExtensionLinux3Display'),')\",\"size\":3,\"title\":\"',variables('ExtensionsLinuxInfo')[variables('ExtensionLinux3Display')].DisplayName,'\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscriptions}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Succeeded\",\"label\":\"\",\"color\":\"green\"},{\"seriesName\":\"\",\"label\":\"Not Present\",\"color\":\"gray\"},{\"seriesName\":\"Failed\",\"color\":\"red\"},{\"seriesName\":\"Deleting\",\"color\":\"redBright\"}]}},\"customWidth\":\"25\",\"name\":\"ExtensionLinux3Pie\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\r\\n| where type in ({MachineType})\\r\\n| extend\\r\\n    JoinID = toupper(id),\\r\\n    OSType = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osType), tolower(tostring((properties.storageProfile).osDisk.osType))),\\r\\n    ServerStatus = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.status), tostring((properties.extended.instanceView).powerState.displayStatus))\\r\\n| where ServerStatus in ({ServerStatus})\\r\\n| join kind=leftouter(\\r\\n    resources\\r\\n| where type == ''microsoft.hybridcompute/machines/extensions'' or type == ''microsoft.compute/virtualmachines/extensions''\\r\\n| where properties.type in (''',parameters('ExtensionLinux1'),''',''',parameters('ExtensionLinux2'),''',''',parameters('ExtensionLinux3'),''',''',parameters('ExtensionLinux4'),''')\\r\\n| extend\\r\\n        VMId = toupper(substring(id, 0, indexof(id, ''/extensions''))),\\r\\n        ExtensionName = tostring(properties.type),\\r\\n\\t\\tStatus = tostring (properties.provisioningState)\\r\\n) on $left.JoinID == $right.VMId\\r\\n| where OSType in (''linux'')\\r\\n| extend Serverid = id\\r\\n| extend ProvisionState = pack(ExtensionName, Status)\\r\\n| summarize ExtProvision = make_bag(ProvisionState) by Serverid, OSType, ServerStatus\\r\\n| extend ',variables('ExtensionLinux4Display'),' = (parse_json(ExtProvision)).[''',parameters('ExtensionLinux4'),''']\\r\\n| project ',variables('ExtensionLinux4Display'),'\\r\\n| summarize count() by tostring(',variables('ExtensionLinux4Display'),')\",\"size\":3,\"title\":\"',variables('ExtensionsLinuxInfo')[variables('ExtensionLinux4Display')].DisplayName,'\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscriptions}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"Succeeded\",\"color\":\"green\"},{\"seriesName\":\"\",\"label\":\"Not Present\",\"color\":\"gray\"},{\"seriesName\":\"Failed\",\"color\":\"red\"},{\"seriesName\":\"Deleting\",\"color\":\"redBright\"}]}},\"customWidth\":\"25\",\"name\":\"ExtensionLinux4Pie\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"889211ce-4505-429c-a299-f0970e98d488\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"',variables('ExtensionLinux1Display'),'status','\",\"type\":10,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n {\\\"value\\\": \\\"Succeeded\\\", \\\"label\\\": \\\"Succeeded\\\"},\\r\\n {\\\"value\\\": \\\"Creating\\\", \\\"label\\\": \\\"Creating\\\"},\\r\\n {\\\"value\\\": \\\"Updating\\\", \\\"label\\\": \\\"Updating\\\"},\\r\\n {\\\"value\\\": \\\"Deleting\\\", \\\"label\\\": \\\"Deleting\\\"},\\r\\n {\\\"value\\\": \\\"Failed\\\", \\\"label\\\": \\\"Failed\\\"},\\r\\n {\\\"value\\\": \\\"<blank>\\\", \\\"label\\\": \\\"NotPresent\\\"}\\r\\n]\\r\\n\",\"timeContext\":{\"durationMs\":86400000}},{\"id\":\"6f86635c-a9d5-4f36-8de3-d9728299b636\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"',variables('ExtensionLinux2Display'),'status','\",\"type\":10,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n {\\\"value\\\": \\\"Succeeded\\\", \\\"label\\\": \\\"Succeeded\\\"},\\r\\n {\\\"value\\\": \\\"Creating\\\", \\\"label\\\": \\\"Creating\\\"},\\r\\n {\\\"value\\\": \\\"Updating\\\", \\\"label\\\": \\\"Updating\\\"},\\r\\n {\\\"value\\\": \\\"Deleting\\\", \\\"label\\\": \\\"Deleting\\\"},\\r\\n {\\\"value\\\": \\\"Failed\\\", \\\"label\\\": \\\"Failed\\\"},\\r\\n {\\\"value\\\": \\\"<blank>\\\", \\\"label\\\": \\\"NotPresent\\\"}\\r\\n]\",\"timeContext\":{\"durationMs\":86400000}},{\"id\":\"e4b863cf-239a-4f8c-b750-80d41a48bd1f\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"',variables('ExtensionLinux3Display'),'status','\",\"type\":10,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n {\\\"value\\\": \\\"Succeeded\\\", \\\"label\\\": \\\"Succeeded\\\"},\\r\\n {\\\"value\\\": \\\"Creating\\\", \\\"label\\\": \\\"Creating\\\"},\\r\\n {\\\"value\\\": \\\"Updating\\\", \\\"label\\\": \\\"Updating\\\"},\\r\\n {\\\"value\\\": \\\"Deleting\\\", \\\"label\\\": \\\"Deleting\\\"},\\r\\n {\\\"value\\\": \\\"Failed\\\", \\\"label\\\": \\\"Failed\\\"},\\r\\n {\\\"value\\\": \\\"<blank>\\\", \\\"label\\\": \\\"NotPresent\\\"}\\r\\n]\",\"timeContext\":{\"durationMs\":86400000}},{\"id\":\"8836930c-1bea-4fc5-9177-e20696478fdd\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"',variables('ExtensionLinux4Display'),'status','\",\"type\":10,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n {\\\"value\\\": \\\"Succeeded\\\", \\\"label\\\": \\\"Succeeded\\\"},\\r\\n {\\\"value\\\": \\\"Creating\\\", \\\"label\\\": \\\"Creating\\\"},\\r\\n {\\\"value\\\": \\\"Updating\\\", \\\"label\\\": \\\"Updating\\\"},\\r\\n {\\\"value\\\": \\\"Deleting\\\", \\\"label\\\": \\\"Deleting\\\"},\\r\\n {\\\"value\\\": \\\"Failed\\\", \\\"label\\\": \\\"Failed\\\"},\\r\\n {\\\"value\\\": \\\"<blank>\\\", \\\"label\\\": \\\"NotPresent\\\"}\\r\\n]\",\"timeContext\":{\"durationMs\":86400000}}],\"style\":\"formHorizontal\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"customWidth\":\"50\",\"name\":\"parameters - 8\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\r\\n| where type in ({MachineType})\\r\\n| extend\\r\\n    JoinID = toupper(id),\\r\\n    OSType = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osName), tolower(tostring((properties.storageProfile).osDisk.osType))),\\r\\n    ServerStatus = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.status), tostring((properties.extended.instanceView).powerState.displayStatus))\\r\\n| where ServerStatus in ({ServerStatus})\\r\\n| join kind=leftouter(\\r\\n    resources\\r\\n| where type == ''microsoft.hybridcompute/machines/extensions'' or type == ''microsoft.compute/virtualmachines/extensions''\\r\\n| where properties.type in (''',parameters('ExtensionLinux1'),''',''',parameters('ExtensionLinux2'),''',''',parameters('ExtensionLinux3'),''',''',parameters('ExtensionLinux4'),''')\\r\\n| extend\\r\\n        VMId = toupper(substring(id, 0, indexof(id, ''/extensions''))),\\r\\n        ExtensionName = tostring(properties.type),\\r\\n\\t\\tVersion = tostring(properties.instanceView.typeHandlerVersion),\\r\\n\\t\\tStatus = tostring (properties.provisioningState)\\r\\n) on $left.JoinID == $right.VMId\\r\\n| where OSType in (''linux'')\\r\\n| extend ArcServer = id\\r\\n| extend ProvisionState = pack(ExtensionName, Status)\\r\\n| summarize ExtProvision = make_bag(ProvisionState) by ArcServer, OSType, ServerStatus\\r\\n| extend ',variables('ExtensionLinux1Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionLinux1'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionLinux1'),'''],\\\"<blank>\\\")\\r\\n| extend ',variables('ExtensionLinux2Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionLinux2'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionLinux2'),'''],\\\"<blank>\\\")\\r\\n| extend ',variables('ExtensionLinux3Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionLinux3'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionLinux3'),'''],\\\"<blank>\\\")\\r\\n| extend ',variables('ExtensionLinux4Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionLinux4'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionLinux4'),'''],\\\"<blank>\\\")\\r\\n| where \\\"{',variables('ExtensionLinux1Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionLinux1Display'),' == \\\"{',variables('ExtensionLinux1Display'),'status',':value}\\\"\\r\\n| where \\\"{',variables('ExtensionLinux2Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionLinux2Display'),' == \\\"{',variables('ExtensionLinux2Display'),'status',':value}\\\"\\r\\n| where \\\"{',variables('ExtensionLinux3Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionLinux3Display'),' == \\\"{',variables('ExtensionLinux3Display'),'status',':value}\\\"\\r\\n| where \\\"{',variables('ExtensionLinux4Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionLinux4Display'),' == \\\"{',variables('ExtensionLinux4Display'),'status',':value}\\\"\\r\\n| count\\r\\n| extend Metric=\\\"Total of Servers filtered.\\\"\",\"size\":3,\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscriptions}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Metric\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Count\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}}},\"customWidth\":\"25\",\"name\":\"query - 9\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\r\\n| where type in ({MachineType})\\r\\n| extend\\r\\n    JoinID = toupper(id),\\r\\n\\tOSName = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osProfile.computerName), tostring((properties.extended.instanceView).computerName)),\\r\\n    OSType = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osName), tolower(tostring((properties.storageProfile).osDisk.osType))),\\r\\n    OSsku = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.osSku), tostring((properties.extended.instanceView).osName)),\\r\\n    ServerStatus = iff( type  == ''microsoft.hybridcompute/machines'', tostring(properties.status), tostring((properties.extended.instanceView).powerState.displayStatus))\\r\\n| where ServerStatus in ({ServerStatus})\\r\\n| join kind=leftouter(\\r\\n    resources\\r\\n| where type == ''microsoft.hybridcompute/machines/extensions'' or type == ''microsoft.compute/virtualmachines/extensions''\\r\\n| where properties.type in (''',parameters('ExtensionLinux1'),''',''',parameters('ExtensionLinux2'),''',''',parameters('ExtensionLinux3'),''',''',parameters('ExtensionLinux4'),''')\\r\\n| extend\\r\\n        VMId = toupper(substring(id, 0, indexof(id, ''/extensions''))),\\r\\n        ExtensionName = tostring(properties.type),\\r\\n        Version = iff( type  == ''microsoft.hybridcompute/machines/extensions'', tostring(properties.instanceView.typeHandlerVersion), tostring(properties.typeHandlerVersion)),\\r\\n\\t\\tStatus = tostring (properties.provisioningState)\\r\\n) on $left.JoinID == $right.VMId\\r\\n| where OSType in (''linux'')\\r\\n| extend ServerName = id\\r\\n| extend VersionNumber = pack(ExtensionName, Version)\\r\\n| extend ProvisionState = pack(ExtensionName, Status)\\r\\n| summarize ExtVersions = make_bag(VersionNumber),ExtProvision = make_bag(ProvisionState) by ServerName, OSType, OSName,OSsku, ServerStatus\\r\\n| extend ',variables('ExtensionLinux1Display'),'version',' = tostring((parse_json(ExtVersions)).[''',parameters('ExtensionLinux1'),''']), ',variables('ExtensionLinux1Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionLinux1'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionLinux1'),'''],\\\"<blank>\\\")\\r\\n| extend ',variables('ExtensionLinux2Display'),'version',' = tostring((parse_json(ExtVersions)).[''',parameters('ExtensionLinux2'),''']), ',variables('ExtensionLinux2Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionLinux2'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionLinux2'),'''],\\\"<blank>\\\")\\r\\n| extend ',variables('ExtensionLinux3Display'),'version',' = tostring((parse_json(ExtVersions)).[''',parameters('ExtensionLinux3'),''']), ',variables('ExtensionLinux3Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionLinux3'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionLinux3'),'''],\\\"<blank>\\\")\\r\\n| extend ',variables('ExtensionLinux4Display'),'version',' = tostring((parse_json(ExtVersions)).[''',parameters('ExtensionLinux4'),''']), ',variables('ExtensionLinux4Display'),' = iff(isnotnull((parse_json(ExtProvision)).[''',parameters('ExtensionLinux4'),''']),(parse_json(ExtProvision)).[''',parameters('ExtensionLinux4'),'''],\\\"<blank>\\\")\\r\\n| where \\\"{',variables('ExtensionLinux1Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionLinux1Display'),' == \\\"{',variables('ExtensionLinux1Display'),'status',':value}\\\"\\r\\n| where \\\"{',variables('ExtensionLinux2Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionLinux2Display'),' == \\\"{',variables('ExtensionLinux2Display'),'status',':value}\\\"\\r\\n| where \\\"{',variables('ExtensionLinux3Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionLinux3Display'),' == \\\"{',variables('ExtensionLinux3Display'),'status',':value}\\\"\\r\\n| where \\\"{',variables('ExtensionLinux4Display'),'status','}\\\"==\\\"\\\" or ',variables('ExtensionLinux4Display'),' == \\\"{',variables('ExtensionLinux4Display'),'status',':value}\\\"\\r\\n| project ServerName, OSsku, ServerStatus, OSType,\\r\\n',variables('ExtensionLinux1Display'),',',variables('ExtensionLinux1Display'),'version',', \\r\\n',variables('ExtensionLinux2Display'),',',variables('ExtensionLinux2Display'),'version',',\\r\\n',variables('ExtensionLinux3Display'),',',variables('ExtensionLinux3Display'),'version',',\\r\\n',variables('ExtensionLinux4Display'),',',variables('ExtensionLinux4Display'),'version',' \\r\\n| sort by ',variables('ExtensionLinux1Display'),'version','\",\"size\":2,\"showExportToExcel\":true,\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{Subscriptions}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"ServerName\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"21.5714ch\"}},{\"columnMatch\":\"OSsku\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"34.4286ch\"}},{\"columnMatch\":\"ServerStatus\",\"formatter\":0,\"formatOptions\":{\"customColumnWidthSetting\":\"18ch\"}},{\"columnMatch\":\"',variables('ExtensionLinux1Display'),'\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"<blank>\",\"text\":\"\"},{\"operator\":\"!=\",\"thresholdValue\":\"Succeeded\",\"representation\":\"3\",\"text\":\"[\\\"',variables('ExtensionLinux1Display'),'version','\\\"] ({0})\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"[\\\"',variables('ExtensionLinux1Display'),'version','\\\"]\"}]}},{\"columnMatch\":\"',variables('ExtensionLinux1Display'),'version','\",\"formatter\":5},{\"columnMatch\":\"',variables('ExtensionLinux2Display'),'\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"<blank>\",\"text\":\"\"},{\"operator\":\"!=\",\"thresholdValue\":\"Succeeded\",\"representation\":\"3\",\"text\":\"[\\\"',variables('ExtensionLinux2Display'),'version','\\\"] ({0})\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"[\\\"',variables('ExtensionLinux2Display'),'version','\\\"]\"}]}},{\"columnMatch\":\"',variables('ExtensionLinux2Display'),'version','\",\"formatter\":5},{\"columnMatch\":\"',variables('ExtensionLinux3Display'),'\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"<blank>\",\"text\":\"\"},{\"operator\":\"!=\",\"thresholdValue\":\"Succeeded\",\"representation\":\"3\",\"text\":\"[\\\"',variables('ExtensionLinux3Display'),'version','\\\"] ({0})\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"[\\\"',variables('ExtensionLinux3Display'),'version','\\\"]\"}]}},{\"columnMatch\":\"',variables('ExtensionLinux3Display'),'version','\",\"formatter\":5},{\"columnMatch\":\"',variables('ExtensionLinux4Display'),'\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"<blank>\",\"text\":\"\"},{\"operator\":\"!=\",\"thresholdValue\":\"Succeeded\",\"representation\":\"3\",\"text\":\"[\\\"',variables('ExtensionLinux4Display'),'version','\\\"]({0})\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"[\\\"',variables('ExtensionLinux4Display'),'version','\\\"]\"}]}},{\"columnMatch\":\"',variables('ExtensionLinux4Display'),'version','\",\"formatter\":5},{\"columnMatch\":\"OmsAgentForLinux\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"is Empty\",\"text\":\"{0}{1}\"},{\"operator\":\"!=\",\"thresholdValue\":\"Succeeded\",\"representation\":\"3\",\"text\":\"[\\\"OmsAgentForLinuxversion\\\"] ({0})\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"[\\\"OmsAgentForLinuxversion\\\"]\"}]}},{\"columnMatch\":\"OmsAgentForLinuxversion\",\"formatter\":5},{\"columnMatch\":\"DependencyAgentLinux\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"is Empty\",\"text\":\"{0}{1}\"},{\"operator\":\"!=\",\"thresholdValue\":\"Succeeded\",\"representation\":\"3\",\"text\":\"[\\\"DependencyAgentLinuxversion\\\"] ({0})\"},{\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"[\\\"DependencyAgentLinuxversion\\\"]\"}]}},{\"columnMatch\":\"DependencyAgentLinuxversion\",\"formatter\":5}],\"rowLimit\":2000,\"filter\":true},\"sortBy\":[]},\"name\":\"query - 5\"}]},\"conditionalVisibility\":{\"parameterName\":\"tab\",\"comparison\":\"isEqualTo\",\"value\":\"2\"},\"name\":\"Group - Extensions Linux\"}],\"isLocked\":false,\"fallbackResourceIds\":[\"azure monitor\"]}')]",
                "version": "1.0",
                "sourceId": "[parameters('workbookSourceId')]",
                "category": "[parameters('workbookType')]"
            }
        }
    ],
    "outputs": {
        "workbookId": {
            "type": "String",
            "value": "[resourceId( 'microsoft.insights/workbooks', parameters('workbookId'))]"
        }
    }
}